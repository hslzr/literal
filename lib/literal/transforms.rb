# frozen_string_literal: true

# A map of core types to transform Procs mapping to the new type.
Literal::TRANSFORMS = {
	Integer => {
		abs: Integer,
		ceil: Integer,
		chr: String,
		denominator: Integer,
		even?: Literal::Types::BooleanType,
		floor: Integer,
		hash: Integer,
		inspect: String,
		integer?: true,
		magnitude: Integer,
		negative?: Literal::Types::BooleanType,
		next: Integer,
		numerator: Integer,
		odd?: Literal::Types::BooleanType,
		ord: Integer,
		positive?: Literal::Types::BooleanType,
		pred: Integer,
		round: Integer,
		size: Integer,
		succ: Integer,
		to_f: Float,
		to_i: Integer,
		to_int: Integer,
		to_r: Rational,
		to_s: String,
		truncate: Integer,
		zero?: Literal::Types::BooleanType,
	},
	String => {
		ascii_only?: Literal::Types::BooleanType,
		bytesize: Integer,
		capitalize: String,
		chomp: String,
		chop: String,
		downcase: String,
		dump: String,
		empty?: Literal::Types::BooleanType,
		hash: Integer,
		inspect: String,
		length: Integer,
		lstrip: String,
		ord: Integer,
		reverse: String,
		rstrip: String,
		scrub: String,
		size: Integer,
		strip: String,
		swapcase: String,
		to_str: String,
		upcase: String,
		valid_encoding?: Literal::Types::BooleanType,
	},
	Numeric => {
		to_i: Integer,
		to_f: Float,
		to_s: String,
	},
	Array => {
		size: Integer,
		length: Integer,
		empty?: Literal::Types::BooleanType,
		sort: Array,
		to_a: Array,
		to_ary: Array,
	},
	Hash => {
		empty?: Literal::Types::BooleanType,
		inspect: String,
		keys: Array,
		length: Integer,
		size: Integer,
		to_a: Array,
		to_h: Hash,
		to_s: String,
		values: Array,
	},
	Set => {
		empty?: Literal::Types::BooleanType,
		inspect: String,
		length: Integer,
		size: Integer,
		to_a: Array,
		to_s: String,
	},
	Float => {
		abs: Float,
		ceil: Integer,
		floor: Integer,
		nan?: Literal::Types::BooleanType,
		negative?: Literal::Types::BooleanType,
		positive?: Literal::Types::BooleanType,
		round: Integer,
		to_i: Integer,
		to_s: String,
		truncate: Integer,
		zero?: Literal::Types::BooleanType,
	},
	Symbol => {
		empty?: Literal::Types::BooleanType,
		inspect: String,
		length: Integer,
		size: Integer,
		to_s: String,
		to_sym: Symbol,
	},
	Range => {
		begin: Object,
		end: Object,
		exclude_end?: Literal::Types::BooleanType,
		first: Object,
		last: Object,
		max: Object,
		min: Object,
		size: Integer,
		to_a: Array,
		to_s: String,
	},
	Regexp => {
		casefold?: Literal::Types::BooleanType,
		inspect: String,
		source: String,
		to_s: String,
	},
	Time => {
		day: Integer,
		hour: Integer,
		inspect: String,
		min: Integer,
		month: Integer,
		sec: Integer,
		to_a: Array,
		to_f: Float,
		to_i: Integer,
		to_s: String,
		year: Integer,
	},
}.transform_values! { |it| it.transform_keys(&:to_proc) }.freeze
